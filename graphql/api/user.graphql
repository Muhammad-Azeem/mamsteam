
extend type Query {
    users: [User!]! @paginate(defaultCount: 10)
    user(id: ID @eq): User @find
    me: User @middleware(checks:["auth:api"]) @auth
}


extend type Mutation
{
    createUser(
        user_id: String @rules(apply: ["required"])
        name: String @rules(apply: ["required"])
        last_name: String  @rules(apply: ["required"])
        password: String @rules(apply: ["required"])
        email: String @rules(apply: ["required", "email", "unique:users,email"])
        address: String @rules(apply: ["required"])
        phone_number: Int @rules(apply: ["required"])
        location: String @rules(apply: ["required"])
        date_of_birth: Date @rules(apply: ["required"])
        gender: String @rules(apply: ["required"])

    ): User! @create

    updateUser(
        id: ID @rules(apply: ["required"])
        name: String @rules(apply: ["required"])
        user_id: String @rules(apply: ["required"])
        last_name: String
        password: String @rules(apply: ["required"])
        email: String @rules(apply: ["required", "email"])
        address: String @rules(apply: ["required"])
        phone_number: Int @rules(apply: ["required"])
        location: String @rules(apply: ["required"])
        date_of_birth: Date
        gender: String @rules(apply: ["required"])
    ): User @update

    deleteUser(
        id: ID! @rules(apply: ["required"])
    ): User @delete
}


type User {
    id: ID!
    user_id: String!
    name: String!
    last_name: String!
    email: String!
    password: String!
    address: String!
    phone_number: Int!
    location: String!
    date_of_birth: Date!
    gender: String!
    remember_token: String!
    deleted_at: DateTime!
    email_verified_at: DateTime!
    created_at: DateTime!
    updated_at: DateTime!
    posts: [Post!] @hasMany
    groups: [Group!] @hasMany
    friends: [Friend!] @hasMany
}
